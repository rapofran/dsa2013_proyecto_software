<?php

/**
 * ItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ItemTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ItemTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Item');
    }

    // devuelve los ultimos 4 items dependiendo del tipo recibido por parametro
    // el parametro $limit es opcional, DESC para ordenarlos bien con la fecha
    public function getItemsByType($type_id, $limit = 0)
    {
      $q = $this->createQuery('i')
      ->where('i.item_type_id=?', $type_id)
      ->orderBy('i.updated_at DESC')
      ->limit($limit);
      
      return $q->execute();
    }

    // devuelve la Query para ejecutarla en el paginado (en la accion)
    // se obtienen todos los articulos de $type_id y se pagina con el paginador de symfony
    public function getQueryItemsByType($type_id)
    {
      return $this->createQuery('i')
      ->where('i.item_type_id=?', $type_id)
      ->orderBy('i.updated_at DESC');
    }

    // obtiene los items con RSS habilitado
    public function getItemsWithRSS($type_id, $limit = 0)
    {
      $q = $this->createQuery('i')
      ->where('i.item_type_id=?', $type_id)
      ->andWhere('i.rss=?','1')
      ->orderBy('i.updated_at DESC')
      ->limit($limit);
      
      return $q->execute();
    }

    public function getItemsBySearch($search)
    {
      $q = $this->createQuery('i')
      ->where('i.title like ?', $search)
      ->orWhere('i.short_description like ?', $search)
      ->orWhere('i.long_description like ?', $search)      
      ->orderBy('i.updated_at DESC');
      
        return $q->execute();
    }

    // actualiza +1 en los clicks del articulo
    public function updateClicks(Item $item)
    {
      $q = Doctrine_Query::create()
      ->update('Item i')
      ->set('i.click', '?', $item->getClick()+1)
      ->where('i.id = ?', $item->getId());

      return $q->execute();
    }

    // obtenemos los articulos que puclico cada usuario
    public static function getArticulosUsuarios($date1 = null, $date2 = null) 
    {
      if(($date1 == null) || ($date2 == null)){
        $q = Doctrine_Query::create()
	        ->select('u.username, count(i.id) as cant')
	        ->from('sfGuardUser u, Item i')
	        ->where('u.id = i.sf_guard_user_id')
	        ->groupBy('u.id');

          return ($q->fetchArray());

      }else{
        $array1 = split('/',$date1);
        $array2 = split('/',$date2);
        $date1 = $array1[2].'/'.$array1[1].'/'.$array1[0];
        $date2 = $array2[2].'/'.$array2[1].'/'.$array2[0];
        
        $q = Doctrine_Query::create()
	        ->select('u.username, count(i.id) as cant')
	        ->from('sfGuardUser u, Item i')
	        ->where('u.id = i.sf_guard_user_id')
          ->andWhere('i.created_at BETWEEN ? AND ?', array($date1, $date2))
	        ->groupBy('u.id');

          return ($q->fetchArray());
      }
    }

    // obtenemos la cantidad de lecturas de cada articulo
    public static function getCantidadClicksArticulos($date1 = null, $date2 = null) 
    {
      if(($date1 == null) || ($date2 == null)){

        return Doctrine_Core::getTable('Item')
                ->createQuery('a')
                ->execute();
      }else{
        $array1 = split('/',$date1);
        $array2 = split('/',$date2);
        $date1 = $array1[2].'/'.$array1[1].'/'.$array1[0];
        $date2 = $array2[2].'/'.$array2[1].'/'.$array2[0];
        
        return Doctrine_Core::getTable('Item')
                ->createQuery('a')
                ->andWhere('a.created_at BETWEEN ? AND ?', array($date1, $date2))
                ->execute();
      }
        
    }

}
